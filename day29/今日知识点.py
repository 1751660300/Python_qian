# -*- coding:utf-8 -*-
"""
1.闭包
    概念：一个函数中创建了另一个函数（函数嵌套）,内层函数要使用外层函数的变量，外层函数要返回内层函数的地址
    为什么要用闭包：闭包可以将局部变量永久保存在内存地址中
    缺点：要使用大量的资源
    修改外层函数变量的值：要使用nonlocal关键字，只能在内层函数中使用
2.装饰器
    概念：本质上是一个闭包函数，在不改变原有函数的基础上给当前函数增加新的功能
    外层函数必须使用一个变量来接收函数的地址
    内层函数必须调用或使用外层函数变量的地址
    可以在内层函数中增加所需功能

    使用：@+闭包函数名
    为什么要是用装饰器：
        在不改变原函数的基础上增加函数功能
    被装饰器装饰的函数，执行是在内层函数执行的时候执行
    被装饰器装饰的函数使用return，只需要在内层函数调用时使用return关键字返回即可
    多个装饰器的使用：直接在上面再添加一个装饰器即可
3.匿名函数
    没有具体名字的函数表达式
    创建匿名函数
        使用lambda 如    s = lambda a, b: a + b
                        print(s(1, 2))

"""