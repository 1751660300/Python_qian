# -*- coding:utf-8 -*-
"""
1.迭代器
    定义：实现了__iter__和__next__方法的方法就是迭代器
    作用：用来实现遍历数据的
    __iter__方法在迭代器中作用：返回该类的迭代器的对象实列化对象本身
    __next__方法作用：实现遍历数据
    __iter__方法在迭代对象中作用：返回该类的迭代器的对象
2.迭代器和迭代对象的对比
    可迭代对象：是通过__iter__方法创建的类的实列化得来的
        作用：用来存储数据的
    迭代器：通过__iter__和__next__方法创建的类实列化来的
        提供给for循环取值的操作
    iter方法要返还一个迭代器对象
    迭代器是一种特殊的迭代对象
3.判断是否为迭代器
    导入模块  from collections import Iterator
    使用isinstance()方法来判断
4.iter和next方法（都是内置函数）
    iter(可迭代对象)：直接到用可迭代对象的__iter__方法获取迭代器
    next(迭代器)：调用迭代器中的__next__方法实现数据编历
5.for循环的使用原理
    一开始使用内建函数iter()方法拿到迭代器对象，然后循环调用迭代器 对象的__next__方法实现数据遍历
6.迭代器的应用场景
    a.节约内存资源：数据不需要存储在程序中，而是通过规律产生数据
        通过时间换取空间
    b.开创一种新的可迭代数据类型
7.生成器
    是一种特殊的迭代器，它不需要使用类来创建，但是生成器内部已经实现了__iter__和__next__方法，它本身就是一个迭代器，可迭代对象
    a.创建生成器：使用()   num_list = (i for i in range(10))  只能创建一些简单的数据
"""

